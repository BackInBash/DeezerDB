// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DeezerDB.Models.DeezerPlaylist;
//
//    var playlist = Playlist.FromJson(jsonString);

namespace DeezerDB.Models.DeezerPlaylist
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Playlist
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("public")]
        public bool Public { get; set; }

        [JsonProperty("is_loved_track")]
        public bool IsLovedTrack { get; set; }

        [JsonProperty("collaborative")]
        public bool Collaborative { get; set; }

        [JsonProperty("nb_tracks")]
        public long NbTracks { get; set; }

        [JsonProperty("fans")]
        public long Fans { get; set; }

        [JsonProperty("link")]
        public Uri Link { get; set; }

        [JsonProperty("share")]
        public Uri Share { get; set; }

        [JsonProperty("picture")]
        public Uri Picture { get; set; }

        [JsonProperty("picture_small")]
        public Uri PictureSmall { get; set; }

        [JsonProperty("picture_medium")]
        public Uri PictureMedium { get; set; }

        [JsonProperty("picture_big")]
        public Uri PictureBig { get; set; }

        [JsonProperty("picture_xl")]
        public Uri PictureXl { get; set; }

        [JsonProperty("checksum")]
        public string Checksum { get; set; }

        [JsonProperty("tracklist")]
        public Uri Tracklist { get; set; }

        [JsonProperty("creation_date")]
        public DateTimeOffset CreationDate { get; set; }

        [JsonProperty("creator")]
        public Creator Creator { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("tracks")]
        public Tracks Tracks { get; set; }
    }

    public partial class Creator
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("tracklist")]
        public Uri Tracklist { get; set; }

        [JsonProperty("type")]
        public CreatorType Type { get; set; }

        [JsonProperty("link", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Link { get; set; }
    }

    public partial class Tracks
    {
        [JsonProperty("data")]
        public List<Datum> Data { get; set; }

        [JsonProperty("checksum")]
        public string Checksum { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("readable")]
        public bool Readable { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("title_short")]
        public string TitleShort { get; set; }

        [JsonProperty("title_version", NullValueHandling = NullValueHandling.Ignore)]
        public string TitleVersion { get; set; }

        [JsonProperty("link")]
        public Uri Link { get; set; }

        [JsonProperty("duration")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Duration { get; set; }

        [JsonProperty("rank")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Rank { get; set; }

        [JsonProperty("explicit_lyrics")]
        public bool ExplicitLyrics { get; set; }

        [JsonProperty("explicit_content_lyrics")]
        public long ExplicitContentLyrics { get; set; }

        [JsonProperty("explicit_content_cover")]
        public long ExplicitContentCover { get; set; }

        [JsonProperty("preview")]
        public string Preview { get; set; }

        [JsonProperty("time_add")]
        public long TimeAdd { get; set; }

        [JsonProperty("artist")]
        public Creator Artist { get; set; }

        [JsonProperty("album")]
        public Album Album { get; set; }

        [JsonProperty("type")]
        public DatumType Type { get; set; }
    }

    public partial class Album
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("cover")]
        public Uri Cover { get; set; }

        [JsonProperty("cover_small")]
        public Uri CoverSmall { get; set; }

        [JsonProperty("cover_medium")]
        public Uri CoverMedium { get; set; }

        [JsonProperty("cover_big")]
        public Uri CoverBig { get; set; }

        [JsonProperty("cover_xl")]
        public Uri CoverXl { get; set; }

        [JsonProperty("tracklist")]
        public Uri Tracklist { get; set; }

        [JsonProperty("type")]
        public AlbumType Type { get; set; }
    }

    public enum CreatorType { Artist, User };

    public enum AlbumType { Album };

    public enum DatumType { Track };

    public partial class Playlist
    {
        public static Playlist FromJson(string json) => JsonConvert.DeserializeObject<Playlist>(json, DeezerDB.Models.DeezerPlaylist.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Playlist self) => JsonConvert.SerializeObject(self, DeezerDB.Models.DeezerPlaylist.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CreatorTypeConverter.Singleton,
                AlbumTypeConverter.Singleton,
                DatumTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class CreatorTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CreatorType) || t == typeof(CreatorType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "artist":
                    return CreatorType.Artist;
                case "user":
                    return CreatorType.User;
            }
            throw new Exception("Cannot unmarshal type CreatorType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CreatorType)untypedValue;
            switch (value)
            {
                case CreatorType.Artist:
                    serializer.Serialize(writer, "artist");
                    return;
                case CreatorType.User:
                    serializer.Serialize(writer, "user");
                    return;
            }
            throw new Exception("Cannot marshal type CreatorType");
        }

        public static readonly CreatorTypeConverter Singleton = new CreatorTypeConverter();
    }

    internal class AlbumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AlbumType) || t == typeof(AlbumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "album")
            {
                return AlbumType.Album;
            }
            throw new Exception("Cannot unmarshal type AlbumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AlbumType)untypedValue;
            if (value == AlbumType.Album)
            {
                serializer.Serialize(writer, "album");
                return;
            }
            throw new Exception("Cannot marshal type AlbumType");
        }

        public static readonly AlbumTypeConverter Singleton = new AlbumTypeConverter();
    }

    internal class DatumTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DatumType) || t == typeof(DatumType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "track")
            {
                return DatumType.Track;
            }
            throw new Exception("Cannot unmarshal type DatumType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DatumType)untypedValue;
            if (value == DatumType.Track)
            {
                serializer.Serialize(writer, "track");
                return;
            }
            throw new Exception("Cannot marshal type DatumType");
        }

        public static readonly DatumTypeConverter Singleton = new DatumTypeConverter();
    }
}