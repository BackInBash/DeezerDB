// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DeezerDB.Models.DeezerTrack;
//
//    var track = Track.FromJson(jsonString);

namespace DeezerDB.Models.DeezerTrack
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Track
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("readable")]
        public bool Readable { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("title_short")]
        public string TitleShort { get; set; }

        [JsonProperty("title_version")]
        public string TitleVersion { get; set; }

        [JsonProperty("link")]
        public Uri Link { get; set; }

        [JsonProperty("duration")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Duration { get; set; }

        [JsonProperty("rank")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Rank { get; set; }

        [JsonProperty("explicit_lyrics")]
        public bool ExplicitLyrics { get; set; }

        [JsonProperty("explicit_content_lyrics")]
        public long ExplicitContentLyrics { get; set; }

        [JsonProperty("explicit_content_cover")]
        public long ExplicitContentCover { get; set; }

        [JsonProperty("preview")]
        public string Preview { get; set; }

        [JsonProperty("time_add")]
        public long TimeAdd { get; set; }

        [JsonProperty("artist")]
        public Artist Artist { get; set; }

        [JsonProperty("album")]
        public Album Album { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("inPlaylist")]
        public string? inPlaylist { get; set; }
    }

    public partial class Album
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("cover")]
        public Uri Cover { get; set; }

        [JsonProperty("cover_small")]
        public Uri CoverSmall { get; set; }

        [JsonProperty("cover_medium")]
        public Uri CoverMedium { get; set; }

        [JsonProperty("cover_big")]
        public Uri CoverBig { get; set; }

        [JsonProperty("cover_xl")]
        public Uri CoverXl { get; set; }

        [JsonProperty("tracklist")]
        public Uri Tracklist { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Artist
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("link")]
        public Uri Link { get; set; }

        [JsonProperty("picture")]
        public Uri Picture { get; set; }

        [JsonProperty("picture_small")]
        public Uri PictureSmall { get; set; }

        [JsonProperty("picture_medium")]
        public Uri PictureMedium { get; set; }

        [JsonProperty("picture_big")]
        public Uri PictureBig { get; set; }

        [JsonProperty("picture_xl")]
        public Uri PictureXl { get; set; }

        [JsonProperty("tracklist")]
        public Uri Tracklist { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Track
    {
        public static List<Track> FromJson(string json) => JsonConvert.DeserializeObject<List<Track>>(json, DeezerDB.Models.DeezerTrack.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Track self) => JsonConvert.SerializeObject(self, DeezerDB.Models.DeezerTrack.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}